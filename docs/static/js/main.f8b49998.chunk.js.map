{"version":3,"sources":["Recipe.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","title","image","src","calories","ingredients","className","href","alt","map","ingredient","text","App","useState","myrecipes","setMyrecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","recipe","key","label","url","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oOAsBeA,EApBA,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,IAAKC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YAC3C,OACI,yBAAKC,UAAU,eACX,4BAAI,uBAAGC,KAAMJ,GAAMF,IACnB,yBAAKE,IAAKD,EAAOM,IAAKP,IACtB,2BACKG,GAEL,2CACA,4BACKC,EAAYI,KAAI,SAAAC,GAAU,OACnB,4BAAKA,EAAWC,YCoDzBC,G,MA7DH,WACV,IADgB,EAIkBC,mBAAS,IAJ3B,mBAITC,EAJS,KAIEC,EAJF,OAKYF,mBAAS,IALrB,mBAKTG,EALS,KAKDC,EALC,OAMUJ,mBAAS,WANnB,mBAMTK,EANS,KAMFC,EANE,KAShBC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OAAoCL,EAApC,mBAbf,WAae,oBAZd,qCAWG,cACXM,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBX,EAAaW,EAAKC,MAClBC,QAAQC,IAAIH,EAAKC,MAJA,2CAAH,qDAgBhB,OACE,yBAAKrB,UAAU,OACb,mEAEA,yBAAKA,UAAU,cACb,0BAAMwB,SAVM,SAAAC,GAChBA,EAAEC,iBACFb,EAASH,IAQsBV,UAAU,eACnC,2BAAOA,UAAU,eAAe2B,KAAK,OAAOC,MAAOlB,EAAQmB,SAf9C,SAAAJ,GACnBd,EAAUc,EAAEK,OAAOF,UAeb,4BAAQ5B,UAAU,aAAa2B,KAAK,UAApC,YAKJ,yBAAK3B,UAAU,gBAGXQ,EAAUL,KAAI,SAAA4B,GAAM,OAClB,kBAAC,EAAD,CACEC,IAAKD,EAAOA,OAAOE,MACnBtC,MAAOoC,EAAOA,OAAOE,MACrBrC,MAAOmC,EAAOA,OAAOnC,MACrBE,SAAUiC,EAAOA,OAAOjC,SACxBD,IAAKkC,EAAOA,OAAOG,IACnBnC,YAAagC,EAAOA,OAAOhC,qBC3CrBoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f8b49998.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Recipe = ({ title, image, src, calories, ingredients }) => {\r\n    return (\r\n        <div className=\"recipe_item\">\r\n            <h2><a href={src}>{title}</a></h2>\r\n            <img src={image} alt={title} />\r\n            <p>\r\n                {calories}\r\n            </p>\r\n            <h3>Ingedrients</h3>\r\n            <ul>\r\n                {ingredients.map(ingredient => (\r\n                        <li>{ingredient.text}</li>\r\n                    ))}\r\n\r\n            </ul>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Recipe;","import React, { useEffect, useState } from 'react';\r\nimport Recipe from './Recipe';\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n  const APP_ID = '81be816a';\r\n  const APP_KEY = '89faa0a4ffe6d67b4e2bc865d5cb4c33';\r\n\r\n  const [myrecipes, setMyrecipes] = useState([]);\r\n  const [search, setSearch] = useState('');\r\n  const [query, setQuery] = useState('chicken');\r\n\r\n\r\n  useEffect(() => {\r\n    getRecipes();\r\n  }, [query]);\r\n\r\n  const getRecipes = async () => {\r\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\r\n    const data = await response.json();\r\n    setMyrecipes(data.hits);\r\n    console.log(data.hits);\r\n  }\r\n\r\n  const updateSearch = e => {\r\n    setSearch(e.target.value);\r\n  }\r\n\r\n  const getSearch = e => {\r\n    e.preventDefault();\r\n    setQuery(search);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Recipe Search Using Third Party API</h1>\r\n\r\n      <div className=\"app_search\">\r\n        <form onSubmit={getSearch} className=\"search_form\">\r\n          <input className=\"search_input\" type=\"text\" value={search} onChange={updateSearch} />\r\n          <button className=\"search_btn\" type=\"submit\">\r\n            Search\r\n          </button>\r\n        </form>\r\n      </div>\r\n      <div className=\"app_listings\">\r\n\r\n        {\r\n          myrecipes.map(recipe => (\r\n            <Recipe\r\n              key={recipe.recipe.label}\r\n              title={recipe.recipe.label}\r\n              image={recipe.recipe.image}\r\n              calories={recipe.recipe.calories}\r\n              src={recipe.recipe.url}\r\n              ingredients={recipe.recipe.ingredients}\r\n            />\r\n          )\r\n          )}\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}